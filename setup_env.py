#!/usr/bin/env python3
"""
Environment Setup Script for OCR Table Analytics

This script helps users set up their environment variables safely.
"""

import os
import secrets
import string
from pathlib import Path

def generate_secret_key(length=32):
    """Generate a secure random key."""
    alphabet = string.ascii_letters + string.digits + "!@#$%^&*"
    return ''.join(secrets.choice(alphabet) for _ in range(length))

def setup_environment():
    """Set up environment variables interactively."""
    print("üîß OCR Table Analytics Environment Setup")
    print("=" * 50)
    
    env_file = Path(".env")
    env_example = Path(".env.example")
    
    if env_file.exists():
        response = input("‚ö†Ô∏è  .env file already exists. Overwrite? (y/N): ")
        if response.lower() != 'y':
            print("‚ùå Setup cancelled.")
            return
    
    if not env_example.exists():
        print("‚ùå .env.example file not found!")
        return
    
    print("\nüìã Setting up your environment variables...")
    print("üí° Press Enter to use default values or skip optional settings\n")
    
    # Read template
    with open(env_example, 'r') as f:
        template = f.read()
    
    # Interactive setup
    config = {}
    
    # OpenAI API Key (optional)
    print("ü§ñ AI Features (Optional)")
    openai_key = input("OpenAI API Key (for AI features, optional): ").strip()
    config['OPENAI_API_KEY'] = openai_key if openai_key else 'your_openai_api_key_here'
    
    # Database (optional for basic usage)
    print("\nüíæ Database Configuration (Optional for basic usage)")
    db_url = input("Database URL [postgresql://postgres:password@localhost:5432/ocr_analytics]: ").strip()
    config['DATABASE_URL'] = db_url if db_url else 'postgresql://postgres:password@localhost:5432/ocr_analytics'
    
    # Processing settings
    print("\n‚öôÔ∏è  Processing Configuration")
    max_file_size = input("Max file size in MB [100]: ").strip()
    config['MAX_FILE_SIZE_MB'] = max_file_size if max_file_size else '100'
    
    temp_dir = input("Temporary directory [/tmp/ocr_processing]: ").strip()
    config['TEMP_DIRECTORY'] = temp_dir if temp_dir else '/tmp/ocr_processing'
    
    # UI Configuration
    print("\nüñ•Ô∏è  UI Configuration")
    ui_host = input("UI Host [0.0.0.0]: ").strip()
    config['UI_HOST'] = ui_host if ui_host else '0.0.0.0'
    
    ui_port = input("UI Port [8501]: ").strip()
    config['UI_PORT'] = ui_port if ui_port else '8501'
    
    # OCR Settings
    print("\nüîç OCR Configuration")
    ocr_engine = input("Default OCR Engine [auto]: ").strip()
    config['DEFAULT_OCR_ENGINE'] = ocr_engine if ocr_engine else 'auto'
    
    confidence = input("Default Confidence Threshold [0.5]: ").strip()
    config['DEFAULT_CONFIDENCE'] = confidence if confidence else '0.5'
    
    # Security (auto-generate)
    print("\nüîí Security Configuration (auto-generating secure keys)")
    config['SECRET_KEY'] = generate_secret_key(32)
    config['JWT_SECRET'] = generate_secret_key(32)
    config['ENCRYPTION_KEY'] = generate_secret_key(32)
    
    # System settings
    config['DEBUG'] = 'false'
    config['LOG_LEVEL'] = 'INFO'
    config['TESSERACT_PATH'] = 'tesseract'
    config['EASYOCR_GPU'] = 'false'
    config['UI_DEBUG'] = 'false'
    config['ENABLE_PREPROCESSING'] = 'true'
    config['MAX_IMAGE_SIZE'] = '10485760'
    config['PROCESSING_TIMEOUT'] = '300'
    
    # Optional AI providers
    anthropic_key = input("\nAnthropic API Key (optional): ").strip()
    config['ANTHROPIC_API_KEY'] = anthropic_key if anthropic_key else 'your_anthropic_api_key_here'
    
    claude_key = input("Claude API Key (optional): ").strip()
    config['CLAUDE_API_KEY'] = claude_key if claude_key else 'your_claude_api_key_here'
    
    # Generate .env file
    env_content = []
    env_content.append("# Environment variables for OCR Table Analytics System")
    env_content.append("# Generated by setup_env.py\n")
    
    env_content.append("# OpenAI Configuration (optional - for AI features)")
    env_content.append(f"OPENAI_API_KEY={config['OPENAI_API_KEY']}\n")
    
    env_content.append("# Database Configuration")
    env_content.append(f"DATABASE_URL={config['DATABASE_URL']}\n")
    
    env_content.append("# Processing Configuration")
    env_content.append(f"MAX_FILE_SIZE_MB={config['MAX_FILE_SIZE_MB']}")
    env_content.append(f"TEMP_DIRECTORY={config['TEMP_DIRECTORY']}\n")
    
    env_content.append("# System Configuration")
    env_content.append(f"DEBUG={config['DEBUG']}")
    env_content.append(f"LOG_LEVEL={config['LOG_LEVEL']}\n")
    
    env_content.append("# OCR Configuration")
    env_content.append(f"TESSERACT_PATH={config['TESSERACT_PATH']}")
    env_content.append(f"EASYOCR_GPU={config['EASYOCR_GPU']}\n")
    
    env_content.append("# UI Configuration")
    env_content.append(f"UI_HOST={config['UI_HOST']}")
    env_content.append(f"UI_PORT={config['UI_PORT']}")
    env_content.append(f"UI_DEBUG={config['UI_DEBUG']}\n")
    
    env_content.append("# OCR Settings")
    env_content.append(f"DEFAULT_OCR_ENGINE={config['DEFAULT_OCR_ENGINE']}")
    env_content.append(f"DEFAULT_CONFIDENCE={config['DEFAULT_CONFIDENCE']}")
    env_content.append(f"ENABLE_PREPROCESSING={config['ENABLE_PREPROCESSING']}\n")
    
    env_content.append("# Performance")
    env_content.append(f"MAX_IMAGE_SIZE={config['MAX_IMAGE_SIZE']}")
    env_content.append(f"PROCESSING_TIMEOUT={config['PROCESSING_TIMEOUT']}\n")
    
    env_content.append("# Security (auto-generated secure values)")
    env_content.append(f"SECRET_KEY={config['SECRET_KEY']}")
    env_content.append(f"JWT_SECRET={config['JWT_SECRET']}")
    env_content.append(f"ENCRYPTION_KEY={config['ENCRYPTION_KEY']}\n")
    
    env_content.append("# Optional: Other AI Provider Keys")
    env_content.append(f"ANTHROPIC_API_KEY={config['ANTHROPIC_API_KEY']}")
    env_content.append(f"CLAUDE_API_KEY={config['CLAUDE_API_KEY']}")
    
    # Write .env file
    with open(env_file, 'w') as f:
        f.write('\n'.join(env_content))
    
    print(f"\n‚úÖ Environment file created: {env_file}")
    print("\nüîí Security Notes:")
    print("   - Your .env file contains sensitive information")
    print("   - Never commit .env to version control")
    print("   - Keep your API keys secure and private")
    print("\nüöÄ Next steps:")
    print("   1. Review your .env file")
    print("   2. Install dependencies: pip install -r requirements.txt")
    print("   3. Run the application: python run_ui.py")

if __name__ == "__main__":
    try:
        setup_environment()
    except KeyboardInterrupt:
        print("\n‚ùå Setup cancelled by user.")
    except Exception as e:
        print(f"\n‚ùå Error during setup: {e}")
        print("Please check the error and try again.")